#!C:\pythonCode
# -*- coding: utf-8 -*-
# @Time : 2023/6/12 9:07
# @Author : caorenlong
# @File : sig.py
# @Software: PyCharm
# signature Python example

from pprint import pprint
import oqs

#######################################################################
# signature example
#######################################################################

sigs = oqs.get_enabled_sig_mechanisms()

#print("Enabled signature mechanisms:")
#pprint(sigs, compact="True")

message = "This is the message to sign".encode()
print("待签名的消息：",message)

# create signer and verifier with Dilithium5 signature mechanisms
sigalg = "Dilithium5"
with oqs.Signature(sigalg) as signer:
    with oqs.Signature(sigalg) as verifier:
        print("\nSignature details:")
        pprint(signer.details)

        # signer generates its keypair
        signer_public_key = signer.generate_keypair()
        print("signer_public_key:",signer_public_key)
        print("len(signer_public_key):",len(signer_public_key))
        # optionally, the secret key can be obtained by calling export_secret_key()
        # and the signer can later be re-instantiated with the key pair:
        secret_key = signer.export_secret_key()
        print("secret_key:",secret_key)
        print("len(secret_key):",len(secret_key))
        # store key pair, wait... (session resumption):
        # signer = oqs.Signature(sigalg, secret_key)

        # signer signs the message
        signature = signer.sign(message)
        print("signature:",signature)
        print("len(signature):",len(signature))

        # verifier verifies the signature
        is_valid = verifier.verify(message, signature, signer_public_key)

        print("\nValid signature?", is_valid)

